// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package postgres

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserRoleType string

const (
	UserRoleTypeAdmin      UserRoleType = "admin"
	UserRoleTypeNormaluser UserRoleType = "normal user"
)

func (e *UserRoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRoleType(s)
	case string:
		*e = UserRoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRoleType: %T", src)
	}
	return nil
}

type NullUserRoleType struct {
	UserRoleType UserRoleType `json:"userRoleType"`
	Valid        bool         `json:"valid"` // Valid is true if UserRoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.UserRoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRoleType), nil
}

func (e UserRoleType) Valid() bool {
	switch e {
	case UserRoleTypeAdmin,
		UserRoleTypeNormaluser:
		return true
	}
	return false
}

func AllUserRoleTypeValues() []UserRoleType {
	return []UserRoleType{
		UserRoleTypeAdmin,
		UserRoleTypeNormaluser,
	}
}

type Sessions struct {
	ID          int64            `json:"id"`
	CreatedAt   pgtype.Timestamp `json:"createdAt"`
	UpdatedAt   pgtype.Timestamp `json:"updatedAt"`
	AccessToken string           `json:"accessToken"`
	UserID      int64            `json:"userId"`
}

type UserLogs struct {
	ID           int64            `json:"id"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
	UserID       pgtype.Int8      `json:"userId"`
	Event        string           `json:"event"`
	RequestUrl   string           `json:"requestUrl"`
	Data         []byte           `json:"data"`
	Status       int32            `json:"status"`
	ErrorMessage pgtype.Text      `json:"errorMessage"`
}

type Users struct {
	ID        int64            `json:"id"`
	CreatedAt pgtype.Timestamp `json:"createdAt"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
	Email     string           `json:"email"`
	Name      string           `json:"name"`
	Password  string           `json:"password"`
	UserRole  UserRoleType     `json:"userRole"`
}
