// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package dependency_manager

import (
	"admin-panel/internal/user/adapter/postgresAdapter"
	"admin-panel/internal/user/service"
	"admin-panel/pkg/common"
	"admin-panel/pkg/config"
	"admin-panel/pkg/jwt"
	"admin-panel/pkg/password"
	"admin-panel/pkg/postgres"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeContainer() *commonimport.Container {
	logger := commonimport.ProvideLogger()
	configConfig := config.ProvideConfig()
	queries := postgres.ProvideClient(configConfig)
	pool := postgres.ProvideSqlx(configConfig)
	userRepositoryInterface := postgresAdapter.ProvideUserRepositoryInterface(queries, pool)
	passwordManager := passwordpackage.ProvidePasswordManager()
	jwtManager := jwt.ProvideTokenParser(configConfig)
	sessionRepositoryInterface := postgresAdapter.ProvideUserSessionRepository(queries, pool)
	userLogRepositoryInterface := postgresAdapter.ProvideUserLogRepositoryInterface(queries, pool)
	userManager := service.ProvideUserManager(userRepositoryInterface, passwordManager, jwtManager, sessionRepositoryInterface, configConfig, userLogRepositoryInterface)
	authenticator := service.ProvideAuthenticator(userManager, jwtManager, configConfig, sessionRepositoryInterface)
	userLogRecorder := service.ProvideUserLogRecorder(userRepositoryInterface, passwordManager, jwtManager, sessionRepositoryInterface, configConfig, userLogRepositoryInterface)
	httpOperation := commonimport.ProvideHTTPOperation(logger, authenticator, configConfig, userLogRecorder)
	container := commonimport.ProvideContainer(logger, httpOperation, configConfig, authenticator, pool, queries, passwordManager)
	return container
}

// wire.go:

var SuperSet = wire.NewSet(commonimport.ProvideLogger, commonimport.ProvideHTTPOperation, commonimport.ProvideContainer, postgres.ProvideSqlx, config.ProvideConfig, postgres.ProvideClient, jwt.ProvideTokenParser, postgresAdapter.ProvideUserRepositoryInterface, postgresAdapter.ProvideUserLogRepositoryInterface, postgresAdapter.ProvideUserSessionRepository, service.ProvideUserManager, service.ProvideUserService, service.ProvideUserLogRecorder, service.ProvideAuthenticator, passwordpackage.ProvidePasswordManager)
