// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package container

import (
	"admin-panel/internal/user/adapter/postgresAdapter"
	"admin-panel/internal/user/service"
	"admin-panel/pkg/common"
	"admin-panel/pkg/config"
	"admin-panel/pkg/jwt"
	"admin-panel/pkg/password"
	"admin-panel/pkg/postgres"
)

// Injectors from wire.go:

func InitializeContainer() *UserContainer {
	configConfig := config.ProvideConfig()
	queries := postgres.ProvideClient(configConfig)
	pool := postgres.ProvideSqlx(configConfig)
	userRepositoryInterface := postgresAdapter.ProvideUserRepositoryInterface(queries, pool)
	passwordManager := passwordpackage.ProvidePasswordManager()
	jwtManager := jwt.ProvideTokenParser(configConfig)
	sessionRepositoryInterface := postgresAdapter.ProvideUserSessionRepository(queries, pool)
	userLogRepositoryInterface := postgresAdapter.ProvideUserLogRepositoryInterface(queries, pool)
	userService := service.ProvideUserService(userRepositoryInterface, passwordManager, jwtManager, sessionRepositoryInterface, configConfig, userLogRepositoryInterface)
	logger := commonimport.ProvideLogger()
	userManager := service.ProvideUserManager(userRepositoryInterface, passwordManager, jwtManager, sessionRepositoryInterface, configConfig, userLogRepositoryInterface)
	authenticator := service.ProvideAuthenticator(userManager, jwtManager, configConfig, sessionRepositoryInterface)
	userLogRecorder := service.ProvideUserLogRecorder(userRepositoryInterface, passwordManager, jwtManager, sessionRepositoryInterface, configConfig, userLogRepositoryInterface)
	httpOperation := commonimport.ProvideHTTPOperation(logger, authenticator, configConfig, userLogRecorder)
	containerUserContainer := ProvideAuthAuthorizeContainer(userService, httpOperation)
	return containerUserContainer
}
